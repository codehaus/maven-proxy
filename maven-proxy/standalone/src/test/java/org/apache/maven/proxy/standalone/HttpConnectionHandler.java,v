head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2002.08.01.20.42.08;	author proyal;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Block with mini webserver for Web Start support
@
text
@/*
 * Copyright (C) The Apache Software Foundation. All rights reserved.
 *
 * This software is published under the terms of the Apache Software License
 * version 1.1, a copy of which has been included with this distribution in
 * the LICENSE.txt file.
 */
package org.apache.avalon.phyre.block;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.net.ProtocolException;
import java.net.Socket;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.avalon.cornerstone.services.connection.ConnectionHandler;
import org.apache.avalon.excalibur.io.IOUtil;
import org.apache.avalon.framework.configuration.Configurable;
import org.apache.avalon.framework.configuration.Configuration;
import org.apache.avalon.framework.configuration.ConfigurationException;
import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.ContextException;
import org.apache.avalon.framework.context.Contextualizable;
import org.apache.avalon.framework.logger.AbstractLogEnabled;

/**
 * @@author <a href="mailto:proyal@@apache.org">Peter Royal</a>
 */
class HttpConnectionHandler extends AbstractLogEnabled
    implements ConnectionHandler, Configurable, Contextualizable, HttpConstants
{
    /* mapping of file extensions to content-types */
    private static final Map CONTENT_TYPE_MAP = new HashMap();
    private static final int BUF_SIZE = 2048;
    private static final byte[] EOL = {( byte ) '\r', ( byte ) '\n'};

    private File m_homeDir;
    private File m_subDir;
    private File m_jnlp;

    private int m_timeout;

    static
    {
        fillMap();
    }

    public void contextualize( Context context )
        throws ContextException
    {
        m_homeDir = ( File ) context.get( "app.home" );
    }

    public void configure( Configuration configuration )
        throws ConfigurationException
    {
        m_subDir = new File( m_homeDir, configuration.getChild( "data-directory" ).getValue() );

        if( !m_subDir.exists() )
        {
            throw new ConfigurationException( "invalid data-directory" );
        }

        m_jnlp = new File( m_subDir,
                           configuration.getChild( "jnlp-file" ).getValue( "phyre.jnlp" ) );

        if( !m_jnlp.exists() )
        {
            throw new ConfigurationException( "invalid jnlp-file" );
        }

        m_timeout = configuration.getAttributeAsInteger( "timeout", 0 );
    }

    public void handleConnection( Socket connection )
        throws IOException, ProtocolException
    {
        final byte[] buffer = new byte[BUF_SIZE];
        final InputStream is = new BufferedInputStream( connection.getInputStream() );
        final PrintStream ps = new PrintStream( connection.getOutputStream() );

        connection.setSoTimeout( m_timeout );
        connection.setTcpNoDelay( true );

        int nread = 0;
        int r = 0;

        outerloop: while( nread < BUF_SIZE )
        {
            r = is.read( buffer, nread, BUF_SIZE - nread );

            if( -1 == r )
            {
                return;
            }

            int i = nread;

            nread += r;

            for( ; i < nread; i++ )
            {
                if( buffer[i] == ( byte ) '\n' || buffer[i] == ( byte ) '\r' )
                {
                    /* read one line */
                    break outerloop;
                }
            }
        }

        boolean get = false;
        int index;

        if( isGet( buffer ) )
        {
            get = true;
            index = 4;
        }
        else if( isHead( buffer ) )
        {
            index = 5;
        }
        else
        {
            /* we don't support this method */
            ps.print( "HTTP/1.0 " + HTTP_BAD_METHOD + " unsupported method type: " );
            ps.write( buffer, 0, 5 );
            ps.write( EOL );
            ps.flush();

            return;
        }

        int i = 0;
        /* find the file name, from:
         * GET /foo/bar.html HTTP/1.0
         * extract "/foo/bar.html"
         */
        for( i = index; i < nread; i++ )
        {
            if( buffer[i] == ( byte ) ' ' )
            {
                break;
            }
        }

        String fname = new String( buffer, 0, index, i - index ).replace( '/', File.separatorChar );
        File target;

        if( fname.startsWith( File.separator ) )
        {
            fname = fname.substring( 1 );
        }

        if( 0 == fname.length() )
        {
            target = m_jnlp;
        }
        else
        {
            target = new File( m_subDir, fname );
        }

        boolean OK = printHeaders( target, ps );

        if( get )
        {
            if( OK )
            {
                sendFile( target, ps );
            }
            else
            {
                send404( ps );
            }
        }
    }

    private void send404( PrintStream ps ) throws IOException
    {
        ps.write( EOL );
        ps.write( EOL );
        ps.println( "Not Found\n\n" + "The requested resource was not found.\n" );
    }

    private void sendFile( File targ, PrintStream ps ) throws IOException
    {
        InputStream is = new FileInputStream( targ.getAbsolutePath() );

        ps.write( EOL );

        try
        {
            IOUtil.copy( is, ps );
        }
        finally
        {
            is.close();
        }
    }

    private boolean printHeaders( File target, PrintStream ps ) throws IOException
    {
        boolean ret = false;
        int rCode = 0;

        if( !target.exists() )
        {
            rCode = HTTP_NOT_FOUND;
            ps.print( "HTTP/1.0 " + HTTP_NOT_FOUND + " not found" );
            ps.write( EOL );
            ret = false;
        }
        else if( target.isDirectory() )
        {
            rCode = HTTP_FORBIDDEN;
            ps.print( "HTTP/1.0 " + HTTP_FORBIDDEN + " Directory listing forbidden" );
            ps.write( EOL );
            ret = false;
        }
        else
        {
            rCode = HTTP_OK;
            ps.print( "HTTP/1.0 " + HTTP_OK + " OK" );
            ps.write( EOL );
            ret = true;
        }

        ps.print( "Server: Phoenix Phyre JNLP Loaded" );
        ps.write( EOL );
        ps.print( "Date: " + new Date() );
        ps.write( EOL );

        if( ret )
        {
            ps.print( "Content-length: " + target.length() );
            ps.write( EOL );
            ps.print( "Last Modified: " + new Date( target.lastModified() ) );
            ps.write( EOL );

            String name = target.getName();

            int ind = name.lastIndexOf( '.' );
            String ct = null;

            if( ind > 0 )
            {
                ct = ( String ) CONTENT_TYPE_MAP.get( name.substring( ind ) );
            }
            if( ct == null )
            {
                ct = "unknown/unknown";
            }

            ps.print( "Content-type: " + ct );
            ps.write( EOL );
        }

        return ret;
    }

    private boolean isHead( final byte[] buffer )
    {
        return buffer[0] == ( byte ) 'H'
            && buffer[1] == ( byte ) 'E'
            && buffer[2] == ( byte ) 'A'
            && buffer[3] == ( byte ) 'D'
            && buffer[4] == ( byte ) ' ';
    }

    private boolean isGet( final byte[] buffer )
    {
        return buffer[0] == ( byte ) 'G'
            && buffer[1] == ( byte ) 'E'
            && buffer[2] == ( byte ) 'T'
            && buffer[3] == ( byte ) ' ';
    }

    private static void setSuffix( String k, String v )
    {
        CONTENT_TYPE_MAP.put( k, v );
    }

    private static void fillMap()
    {
        setSuffix( "", "content/unknown" );
        setSuffix( ".jar", "application/x-jar" );
        setSuffix( ".gif", "image/gif" );
        setSuffix( ".jpg", "image/jpeg" );
        setSuffix( ".jpeg", "image/jpeg" );
        setSuffix( ".htm", "text/html" );
        setSuffix( ".html", "text/html" );
        setSuffix( ".jnlp", "application/x-java-jnlp-file" );
    }
}
@
